// JavaScript Document
$(function () {
    var e = new SlideNav();
    $(".mall-cate-box a").click(function () {
        var j = $(this);
        var l = j.attr("data-type");
        if (!l) {
            return
        }
        var n = $(e.options.menuSelector.wrap).filter('[data-type="' + l + '"]');
        var f = n.find(e.options.menuSelector.top);
        if (f.length) {
            var h = e.isShowedMenu(f, 1);
            $(".pop-shade").trigger("click");
            if (!h) {
                j.parents("li").addClass("select");
                var g = e.controllerToMenu(f, 1, true);
                window.scrollTo(0, $("header").height());
                if (!f.data("initIScroll")) {
                    var i = n.find(".sort-sub-nav");
                    var k = n.find(".sort-wrapper");
                    n.show();
                    var m = Math.min(i.height() + k.height(), $(window).height() - $(".mall-cate-box").height() - 50);
                    n.height(m);
                    k.height(m - i.height())
                }
                e.showTopMenu(g, f)
            }
        }
    });
    $(".sort-view section a").bind("iscrollTap click", function (j) {
        var l = $(this);
        var f = l.attr("data-main");
        var i = f && f.split("_")[1] === "emptyMenu";
        if (j.type === "click") {
            return f && !i ? false : ""
        }
        var k = l.parent();
        k.siblings(".select").removeClass("select");
        k.addClass("select");
        if (f && !i) {
            if ($.inArray(f, e.options.noTriggerMenus) > -1) {
                if (f === e.options.distanceHandle) {
                    getDistanceList(l.attr("href"), l.find("span"))
                }
                return false
            }
            var h = l.parents(e.options.menuSelector.top).siblings(e.options.menuSelector.sub).filter('[data-main="' + f + '"]');
            var g = e.isShowedMenu(h, 2);
            if (!g) {
                e.hideMenu(null, 2);
                e.showSubMenu(null, h)
            }
            return false
        }
    });
    $(".sort-sider section a").bind("iscrollTap click", function (h) {
        var i = $(this);
        var k = i.is(e.options.menuSelector.subHandle);
        if (h.type === "click") {
            return k && i.attr("data-sub") ? false : ""
        }
        if (k) {
            var g = e.controllerToMenu(i, 2);
            var j = e.controllerToMenu(i, 3);
            var f = e.isShowedMenu(j, 3);
            e.controllerToMenu(g, 2, true).removeClass("select");
            e.hideMenu(null, 3);
            if (f) {
                g.showIScroll(true, "refresh")
            } else {
                i.addClass("select");
                e.showThirdMenu(null, j)
            }
            if (j.length) {
                return false
            }
        }
    });
    $(".sort-sub-nav a").click(function () {
        var g = $(this);
        var f = g.attr("data-type");
        if (f) {
            $("#districtLine").attr("data-type", f).trigger("click")
        }
    });
    $(".pop-shade").click(function () {
        e.hideMenu(null, 3);
        e.hideMenu(null, 2);
        e.hideMenu(null, 1);
        $(".mall-cate-box li").removeClass("select");
        $(this).hide().css("height", "100%")
    });
    if (window.initSort) {
        var c = $(e.options.menuSelector.wrap + '[data-type="' + window.initSort + '"]');
        if (c.length) {
            var d = c.find(e.options.menuSelector.top);
            var b = Math.min(d.height(), $(window).height() - $("header").height());
            if (/qqbrowser/i.test(navigator.userAgent) && /iphone|ipod/i.test(navigator.userAgent)) {
                b -= 45
            }
            c.height(b);
            c.find(".sort-wrapper").height(b);
            var a = e.controllerToMenu(d, 1, true);
            e.showTopMenu(a, d)
        }
    }
});
$.fn.extend({
    showIScroll: function (a, c) {
        if (this.length === 0) {
            return this
        }
        var b = this.data("initIScroll");
        if (!b) {
            var b = new IScroll(this.get(0), {
                mouseWheel: true,
                tap: "iscrollTap",
                click: true,
                disableMouse: "ontouchend" in document
            });
            SlideNav.prototype.displayMoreSign(b);
            b.on("scrollEnd", function () {
                SlideNav.prototype.displayMoreSign(b)
            });
            this.data("initIScroll", a ? b : "ok")
        } else {
            if (c && b instanceof IScroll) {
                if (c === "refresh") {
                    b.refresh();
                    SlideNav.prototype.displayMoreSign(b)
                }
            }
        }
        return this
    }
});
var SlideNav = function (a) {
    this.options = $.extend({}, this.options, a);
    this.showedMenus = {}
};
SlideNav.prototype = {
    options: {
        noTriggerMenus: ["distanceHandle"],
        distanceHandle: "distanceHandle",
        menuSignKey: "slideMenuKey",
        menuSelector: {
            wrap: ".sortdrop-wrapper",
            top: ".sort-view",
            sub: ".sort-sider",
            third: ".sort-shop-sider",
            subHandle: ".submenu_handle",
            moreSign: ".m-down",
            noExists: "#noneExistsElement"
        },
        thirdMenus: ["category_3"],
        showEmptySubMenu: false
    },
    showedMenus: {},
    isShowedMenu: function (d, e) {
        var a = d.data(this.options.menuSignKey);
        if (a && this.showedMenus) {
            for (var c in this.showedMenus) {
                if (!e || e === ~~c) {
                    var b = this.showedMenus[c].data(this.options.menuSignKey);
                    if (b === a) {
                        return~~c
                    }
                }
            }
        }
        return 0
    },
    ctrlShowedMenu: function (b, c, a) {
        switch (b) {
        case "get":
            return c in this.showedMenus ? this.showedMenus[c] : $(this.options.menuSelector.noExists);
            break;
        case "show":
            if (a) {
                this.showedMenus[c] = a
            }
            break;
        case "hide":
            delete this.showedMenus[c];
            break
        }
    },
    showMenu: function (b, d, c, a) {
        if (b.length === 0) {
            return false
        }
        if (d === 1 && !a && this.options.menuSelector.wrap) {
            b.parents(this.options.menuSelector.wrap).show()
        }
        b.data(this.options.menuSignKey, Math.random());
        c && b.show() || b.show().showIScroll();
        this.ctrlShowedMenu("show", d, b)
    },
    hideMenu: function (b, d, a) {
        b = b && b.length ? b : this.ctrlShowedMenu("get", d);
        var c = this.isShowedMenu(b, d);
        if (c > 0) {
            this.ctrlShowedMenu("hide", c);
            if (c === 1 && !a && this.options.menuSelector.wrap) {
                b.parents(this.options.menuSelector.wrap).hide()
            } else {
                b.hide()
            }
        }
        return b
    },
    showTopMenu: function (b, g, e) {
        g = g && g.length ? g : this.controllerToMenu(b, 1);
        this.showMenu(g, 1);
        $(".pop-shade").show().height($(".pop-shade").height() + $("footer").height());
        if (b && b.length && !e) {
            var a = b.attr("data-main");
            var d = a && a.split("_")[1] === "emptyMenu";
            if (a && $.inArray(a, this.options.noTriggerMenus) === -1 && (!d || this.options.showEmptySubMenu)) {
                var c = g.parents(this.options.menuSelector.wrap).find(this.options.menuSelector.sub).filter('[data-main="' + a + '"]');
                var f = this.controllerToMenu(c, 2, true);
                this.showSubMenu(f, c)
            }
        }
    },
    showSubMenu: function (a, c, b) {
        c = c && c.length ? c : this.controllerToMenu(a, 2);
        this.showMenu(c, 2, true);
        c.showIScroll($.inArray(c.attr("data-main"), this.options.thirdMenus) > -1);
        if (a && !b) {
            this.showThirdMenu(a)
        }
    },
    showThirdMenu: function (a, b) {
        b = b && b.length ? b : this.controllerToMenu(a, 3);
        this.showMenu(b, 3, true);
        b.parents(this.options.menuSelector.sub).showIScroll(true, "refresh")
    },
    controllerToMenu: function (a, c, b) {
        if (!a || typeof a !== "object") {
            return $(this.options.menuSelector.noExists)
        }
        switch (c) {
        case 1:
            if (b) {
                return a.find(".select a")
            } else {
                return a.parents(this.options.menuSelector.top)
            }
        case 2:
            if (b) {
                return a.find("a.select")
            } else {
                return a.parents(this.options.menuSelector.sub)
            }
        case 3:
            if (b) {
                return a.siblings(this.options.menuSelector.subHandle)
            } else {
                return a.siblings(this.options.menuSelector.third)
            }
        default:
            return $(this.options.menuSelector.noExists)
        }
    },
    displayMoreSign: function (a) {
        var b = true;
        if (a.scrollerHeight <= a.wrapperHeight) {
            b = false
        } else {
            if (a.y - a.maxScrollY < 20) {
                b = false
            }
        }
        $(a.wrapper).find(this.options.menuSelector.moreSign)[b ? "show" : "hide"]()
    }
};

function getDistanceList(b, c) {
    var d = getCookie("cur_lat");
    var a = getCookie("cur_lng");
    if (getDistanceList.isLoading) {
        return
    } else {
        getDistanceList.isLoading = true
    }
    c.text("正在获取位置信息...");
    if (d > 0 && a > 0) {
        getDistanceList.isLoading = false;
        c.text("成功获取,正在跳转...");
        setTimeout(function () {
            c.text("离我最近")
        }, 3000);
        location.href = b
    } else {
        getLocation(function (e) {
            getDistanceList.isLoading = false;
            c.text("成功获取,正在跳转...");
            setTimeout(function () {
                c.text("离我最近")
            }, 3000);
            location.href = b
        }, function (e) {
            c.text(e.show_msg);
            setTimeout(function () {
                getDistanceList.isLoading = false;
                c.text("离我最近")
            }, 1000)
        })
    }
};

